name: Python CI

on:
  push:
    branches:
      - master


permissions:
  contents: write

env:
  PYTHON_VERSION: 3.11

jobs:
  compile:
    name: Compile Python app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: Compile Python app
        run: python3 -m compileall .


  build:
    name: Build and release package
    if: "startsWith(github.event.head_commit.message, 'chore: bump version to')"

    needs:
      - compile

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "${{ env.PYTHON_VERSION }}"
          #cache: 'poetry'

      - name: Set up Poetry
        run: poetry env use ${{ steps.setup-python.outputs.python-path }}

      - name: Install project dependencies
        run: poetry install --no-interaction --without=dev

      - name: Build package
        run: poetry build --no-interaction

      - name: Get current version
        id: version
        run: echo "version=$(poetry version --short --no-interaction)" >> "$GITHUB_OUTPUT"

      - name: Setup git
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"

      - name: Tag commit with version
        run: git tag "v${{ steps.version.outputs.version }}" -m "${{ steps.version.outputs.version }}"

      - name: Push tag
        run: git push --tags

      - name: Publish package on PyPI
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
        run: poetry publish --no-interaction

      - name: Publish a release on GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          draft: false
          prerelease: false
          tag_name: v${{ steps.version.outputs.version }}
          name: ${{  github.ref_name }}
          generate_release_notes: true